# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bulletsim_msgs/OWLMarker.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class OWLMarker(genpy.Message):
  _md5sum = "109bc2da4c65dd1a28bff573840d64e2"
  _type = "bulletsim_msgs/OWLMarker"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#OWLMarker
int32 id
int32 frame
geometry_msgs/Point point
float32 cond
uint32 flag
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','frame','point','cond','flag']
  _slot_types = ['int32','int32','geometry_msgs/Point','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,frame,point,cond,flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OWLMarker, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.frame is None:
        self.frame = 0
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      if self.cond is None:
        self.cond = 0.
      if self.flag is None:
        self.flag = 0
    else:
      self.id = 0
      self.frame = 0
      self.point = geometry_msgs.msg.Point()
      self.cond = 0.
      self.flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i3dfI().pack(_x.id, _x.frame, _x.point.x, _x.point.y, _x.point.z, _x.cond, _x.flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.id, _x.frame, _x.point.x, _x.point.y, _x.point.z, _x.cond, _x.flag,) = _get_struct_2i3dfI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i3dfI().pack(_x.id, _x.frame, _x.point.x, _x.point.y, _x.point.z, _x.cond, _x.flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.point is None:
        self.point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.id, _x.frame, _x.point.x, _x.point.y, _x.point.z, _x.cond, _x.flag,) = _get_struct_2i3dfI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i3dfI = None
def _get_struct_2i3dfI():
    global _struct_2i3dfI
    if _struct_2i3dfI is None:
        _struct_2i3dfI = struct.Struct("<2i3dfI")
    return _struct_2i3dfI
