# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bulletsim_msgs/ObjectInit.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bulletsim_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class ObjectInit(genpy.Message):
  _md5sum = "6385cb06dcc1ad81473bbced10d4b931"
  _type = "bulletsim_msgs/ObjectInit"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string type
Rope rope
Box box
geometry_msgs/PolygonStamped towel_corners

================================================================================
MSG: bulletsim_msgs/Rope
Header header
geometry_msgs/Point[] nodes
float32 radius
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: bulletsim_msgs/Box
geometry_msgs/Point center
geometry_msgs/Point extents
float32 angle

================================================================================
MSG: geometry_msgs/PolygonStamped
# This represents a Polygon with reference coordinate frame and timestamp
Header header
Polygon polygon

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['type','rope','box','towel_corners']
  _slot_types = ['string','bulletsim_msgs/Rope','bulletsim_msgs/Box','geometry_msgs/PolygonStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,rope,box,towel_corners

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectInit, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.rope is None:
        self.rope = bulletsim_msgs.msg.Rope()
      if self.box is None:
        self.box = bulletsim_msgs.msg.Box()
      if self.towel_corners is None:
        self.towel_corners = geometry_msgs.msg.PolygonStamped()
    else:
      self.type = ''
      self.rope = bulletsim_msgs.msg.Rope()
      self.box = bulletsim_msgs.msg.Box()
      self.towel_corners = geometry_msgs.msg.PolygonStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.rope.header.seq, _x.rope.header.stamp.secs, _x.rope.header.stamp.nsecs))
      _x = self.rope.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.rope.nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.rope.nodes:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_f6df3I().pack(_x.rope.radius, _x.box.center.x, _x.box.center.y, _x.box.center.z, _x.box.extents.x, _x.box.extents.y, _x.box.extents.z, _x.box.angle, _x.towel_corners.header.seq, _x.towel_corners.header.stamp.secs, _x.towel_corners.header.stamp.nsecs))
      _x = self.towel_corners.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.towel_corners.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.towel_corners.polygon.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rope is None:
        self.rope = bulletsim_msgs.msg.Rope()
      if self.box is None:
        self.box = bulletsim_msgs.msg.Box()
      if self.towel_corners is None:
        self.towel_corners = geometry_msgs.msg.PolygonStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.rope.header.seq, _x.rope.header.stamp.secs, _x.rope.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rope.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rope.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rope.nodes = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.rope.nodes.append(val1)
      _x = self
      start = end
      end += 68
      (_x.rope.radius, _x.box.center.x, _x.box.center.y, _x.box.center.z, _x.box.extents.x, _x.box.extents.y, _x.box.extents.z, _x.box.angle, _x.towel_corners.header.seq, _x.towel_corners.header.stamp.secs, _x.towel_corners.header.stamp.nsecs,) = _get_struct_f6df3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.towel_corners.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.towel_corners.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.towel_corners.polygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.towel_corners.polygon.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.rope.header.seq, _x.rope.header.stamp.secs, _x.rope.header.stamp.nsecs))
      _x = self.rope.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.rope.nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.rope.nodes:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_f6df3I().pack(_x.rope.radius, _x.box.center.x, _x.box.center.y, _x.box.center.z, _x.box.extents.x, _x.box.extents.y, _x.box.extents.z, _x.box.angle, _x.towel_corners.header.seq, _x.towel_corners.header.stamp.secs, _x.towel_corners.header.stamp.nsecs))
      _x = self.towel_corners.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.towel_corners.polygon.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.towel_corners.polygon.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rope is None:
        self.rope = bulletsim_msgs.msg.Rope()
      if self.box is None:
        self.box = bulletsim_msgs.msg.Box()
      if self.towel_corners is None:
        self.towel_corners = geometry_msgs.msg.PolygonStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.rope.header.seq, _x.rope.header.stamp.secs, _x.rope.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rope.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rope.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rope.nodes = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.rope.nodes.append(val1)
      _x = self
      start = end
      end += 68
      (_x.rope.radius, _x.box.center.x, _x.box.center.y, _x.box.center.z, _x.box.extents.x, _x.box.extents.y, _x.box.extents.z, _x.box.angle, _x.towel_corners.header.seq, _x.towel_corners.header.stamp.secs, _x.towel_corners.header.stamp.nsecs,) = _get_struct_f6df3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.towel_corners.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.towel_corners.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.towel_corners.polygon.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.towel_corners.polygon.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_f6df3I = None
def _get_struct_f6df3I():
    global _struct_f6df3I
    if _struct_f6df3I is None:
        _struct_f6df3I = struct.Struct("<f6df3I")
    return _struct_f6df3I
