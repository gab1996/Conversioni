// Generated by gencpp from file bulletsim_msgs/Mesh.msg
// DO NOT EDIT!


#ifndef BULLETSIM_MSGS_MESSAGE_MESH_H
#define BULLETSIM_MSGS_MESSAGE_MESH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <bulletsim_msgs/Face.h>

namespace bulletsim_msgs
{
template <class ContainerAllocator>
struct Mesh_
{
  typedef Mesh_<ContainerAllocator> Type;

  Mesh_()
    : vertices()
    , normals()
    , faces()  {
    }
  Mesh_(const ContainerAllocator& _alloc)
    : vertices(_alloc)
    , normals(_alloc)
    , faces(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _vertices_type;
  _vertices_type vertices;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _normals_type;
  _normals_type normals;

   typedef std::vector< ::bulletsim_msgs::Face_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::bulletsim_msgs::Face_<ContainerAllocator> >> _faces_type;
  _faces_type faces;





  typedef boost::shared_ptr< ::bulletsim_msgs::Mesh_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bulletsim_msgs::Mesh_<ContainerAllocator> const> ConstPtr;

}; // struct Mesh_

typedef ::bulletsim_msgs::Mesh_<std::allocator<void> > Mesh;

typedef boost::shared_ptr< ::bulletsim_msgs::Mesh > MeshPtr;
typedef boost::shared_ptr< ::bulletsim_msgs::Mesh const> MeshConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bulletsim_msgs::Mesh_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bulletsim_msgs::Mesh_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bulletsim_msgs::Mesh_<ContainerAllocator1> & lhs, const ::bulletsim_msgs::Mesh_<ContainerAllocator2> & rhs)
{
  return lhs.vertices == rhs.vertices &&
    lhs.normals == rhs.normals &&
    lhs.faces == rhs.faces;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bulletsim_msgs::Mesh_<ContainerAllocator1> & lhs, const ::bulletsim_msgs::Mesh_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bulletsim_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bulletsim_msgs::Mesh_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bulletsim_msgs::Mesh_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bulletsim_msgs::Mesh_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bulletsim_msgs::Mesh_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bulletsim_msgs::Mesh_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bulletsim_msgs::Mesh_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bulletsim_msgs::Mesh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "830dcdd998fe31e368add143b5ab2580";
  }

  static const char* value(const ::bulletsim_msgs::Mesh_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x830dcdd998fe31e3ULL;
  static const uint64_t static_value2 = 0x68add143b5ab2580ULL;
};

template<class ContainerAllocator>
struct DataType< ::bulletsim_msgs::Mesh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bulletsim_msgs/Mesh";
  }

  static const char* value(const ::bulletsim_msgs::Mesh_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bulletsim_msgs::Mesh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] vertices\n"
"geometry_msgs/Point[] normals\n"
"Face[] faces\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: bulletsim_msgs/Face\n"
"uint32[] vertex_inds\n"
"uint32[] normal_inds\n"
;
  }

  static const char* value(const ::bulletsim_msgs::Mesh_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bulletsim_msgs::Mesh_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vertices);
      stream.next(m.normals);
      stream.next(m.faces);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Mesh_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bulletsim_msgs::Mesh_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bulletsim_msgs::Mesh_<ContainerAllocator>& v)
  {
    s << indent << "vertices[]" << std::endl;
    for (size_t i = 0; i < v.vertices.size(); ++i)
    {
      s << indent << "  vertices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.vertices[i]);
    }
    s << indent << "normals[]" << std::endl;
    for (size_t i = 0; i < v.normals.size(); ++i)
    {
      s << indent << "  normals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.normals[i]);
    }
    s << indent << "faces[]" << std::endl;
    for (size_t i = 0; i < v.faces.size(); ++i)
    {
      s << indent << "  faces[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::bulletsim_msgs::Face_<ContainerAllocator> >::stream(s, indent + "    ", v.faces[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BULLETSIM_MSGS_MESSAGE_MESH_H
