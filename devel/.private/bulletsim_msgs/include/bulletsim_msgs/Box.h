// Generated by gencpp from file bulletsim_msgs/Box.msg
// DO NOT EDIT!


#ifndef BULLETSIM_MSGS_MESSAGE_BOX_H
#define BULLETSIM_MSGS_MESSAGE_BOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace bulletsim_msgs
{
template <class ContainerAllocator>
struct Box_
{
  typedef Box_<ContainerAllocator> Type;

  Box_()
    : center()
    , extents()
    , angle(0.0)  {
    }
  Box_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , extents(_alloc)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _extents_type;
  _extents_type extents;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::bulletsim_msgs::Box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bulletsim_msgs::Box_<ContainerAllocator> const> ConstPtr;

}; // struct Box_

typedef ::bulletsim_msgs::Box_<std::allocator<void> > Box;

typedef boost::shared_ptr< ::bulletsim_msgs::Box > BoxPtr;
typedef boost::shared_ptr< ::bulletsim_msgs::Box const> BoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bulletsim_msgs::Box_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bulletsim_msgs::Box_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bulletsim_msgs::Box_<ContainerAllocator1> & lhs, const ::bulletsim_msgs::Box_<ContainerAllocator2> & rhs)
{
  return lhs.center == rhs.center &&
    lhs.extents == rhs.extents &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bulletsim_msgs::Box_<ContainerAllocator1> & lhs, const ::bulletsim_msgs::Box_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bulletsim_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bulletsim_msgs::Box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bulletsim_msgs::Box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bulletsim_msgs::Box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bulletsim_msgs::Box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bulletsim_msgs::Box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bulletsim_msgs::Box_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bulletsim_msgs::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70da4b80a6a20bf735552f4c1a288c34";
  }

  static const char* value(const ::bulletsim_msgs::Box_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70da4b80a6a20bf7ULL;
  static const uint64_t static_value2 = 0x35552f4c1a288c34ULL;
};

template<class ContainerAllocator>
struct DataType< ::bulletsim_msgs::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bulletsim_msgs/Box";
  }

  static const char* value(const ::bulletsim_msgs::Box_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bulletsim_msgs::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point center\n"
"geometry_msgs/Point extents\n"
"float32 angle\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::bulletsim_msgs::Box_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bulletsim_msgs::Box_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.extents);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Box_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bulletsim_msgs::Box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bulletsim_msgs::Box_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "extents: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.extents);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BULLETSIM_MSGS_MESSAGE_BOX_H
